options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: generate_rfbb
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: channel_rate
  id: variable
  parameters:
    comment: ''
    value: '80000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [328, 12.0]
    rotation: 0
    state: enabled
- name: interpolation
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 12.0]
    rotation: 0
    state: enabled
- name: symbol_rate
  id: variable
  parameters:
    comment: ''
    value: '18000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: analog_random_source_x_0
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '4'
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '3072'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 196.0]
    rotation: 0
    state: enabled
- name: analog_random_source_x_0_0
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '4'
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '4096'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 460.0]
    rotation: 0
    state: enabled
- name: analog_random_source_x_0_0_0
  id: analog_random_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max: '4'
    maxoutbuf: '0'
    min: '0'
    minoutbuf: '0'
    num_samps: '2048'
    repeat: 'True'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 732.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1.1'
    comment: ''
    freq: '1000000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: channel_rate*interpolation
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 36.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.8'
    comment: ''
    freq: '-500000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: channel_rate*interpolation
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 300.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0_0_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.5'
    comment: ''
    freq: '450000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: channel_rate*interpolation
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 572.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '3'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 320.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 592.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 128.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 400.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0_0_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 680.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: channel_rate*interpolation
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 324.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\ntetra_pi4dqpsk Mapper - Embedded Python Blocks\ninput:\
      \  dibit stream (02 bits per byte) at 18kdibit\noutput: iq complex signal at\
      \ 36ksps\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\n\nclass Pi4DQPSK(gr.interp_block):\n\
      \    # Create our raised-cosine filter\n    num_taps = 11 * 2 + 1\n    beta\
      \ = 0.35\n    Ts = 2\n    t = np.arange(num_taps) - (num_taps-1) // 2\n    h\
      \ = np.sinc(t/Ts) * np.cos(np.pi*beta*t/Ts) / (1 - (2*beta*t/Ts)**2)\n    preConvI\
      \ = np.array([0] * 22, dtype = 'float32')\n    preConvQ = np.array([0] * 22,\
      \ dtype = 'float32')\n    \n    def __init__(self,):\n        gr.interp_block.__init__(\n\
      \            self,\n            name='Pi4DQPSK 18kDibit-to-36kIQk',   \t# will\
      \ show up in GRC\n            in_sig=[np.uint8,],\n            out_sig=[np.complex64],\
      \ interp = 2\n        )\n        self.interp = 2        \n        self.cur_phase_index\
      \ = \t0\t\t\t\t# current phase index value S(0) = 1\n        \n    def work(self,\
      \ input_items, output_items):\n        # Phase Index Change Table: corresponding\
      \ to current phase (row 0-7) and current dibit value (column 0-3)\n        #\
      \ B2k_1,B2k:   00 01 10 11\n            \n        phase_shift = (1, 3, 7, 5)\n\
      \n        # Phase value corresponding to Phase Index\n        IQ_table = ((\
      \ np.cos(np.pi/4 * 0) , np.sin(np.pi/4 * 0) ),\n                    ( np.cos(np.pi/4\
      \ * 1) , np.sin(np.pi/4 * 1) ),\n                    ( np.cos(np.pi/4 * 2) ,\
      \ np.sin(np.pi/4 * 2) ),\n                    ( np.cos(np.pi/4 * 3) , np.sin(np.pi/4\
      \ * 3) ),\n                    ( np.cos(np.pi/4 * 4) , np.sin(np.pi/4 * 4) ),\n\
      \                    ( np.cos(np.pi/4 * 5) , np.sin(np.pi/4 * 5) ),\n      \
      \              ( np.cos(np.pi/4 * 6) , np.sin(np.pi/4 * 6) ),\n            \
      \        ( np.cos(np.pi/4 * 7) , np.sin(np.pi/4 * 7) ))\n\n        # perform\
      \ rrc filter\n        tempI = np.array([0] * (len(input_items[0]) * 2), dtype='float32')\
      \ # 22 = rrc_taps - 1\n        tempQ = np.array([0] * (len(input_items[0]) *\
      \ 2), dtype='float32') # 22 = rrc_taps - 1\n\n        for i in range (0,len(input_items[0])):\n\
      \            input_dibit = input_items[0][i]\n                \n           \
      \ self.cur_phase_index += phase_shift[ input_dibit ]\n            if self.cur_phase_index\
      \ >= 8:\n                self.cur_phase_index -= 8\n\n            tempI[i*2]\
      \ = IQ_table[ self.cur_phase_index ][0]\n            tempQ[i*2] = IQ_table[\
      \ self.cur_phase_index ][1]\n\n        tempIconvolved = np.convolve(tempI, Pi4DQPSK.h)\
      \ \n        tempQconvolved = np.convolve(tempQ, Pi4DQPSK.h)\n        \n    \
      \    for i in range(len(Pi4DQPSK.h)-1):\n            tempIconvolved[i] += Pi4DQPSK.preConvI[i]\n\
      \            tempQconvolved[i] += Pi4DQPSK.preConvQ[i]\n\n        for i in range(len(Pi4DQPSK.h)-1):\n\
      \            Pi4DQPSK.preConvI[-i-1] = tempIconvolved[-i-1]\n            Pi4DQPSK.preConvQ[-i-1]\
      \ = tempQconvolved[-i-1]\n        for i in range(len(input_items[0])*2):\n \
      \           output_items[0][i] = tempIconvolved [i] + 1j*tempQconvolved[i]\n\
      \                                   \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Pi4DQPSK 18kDibit-to-36kIQk', 'Pi4DQPSK', [], [('0', 'byte', 1)],
      [('0', 'complex', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 224.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\ntetra_pi4dqpsk Mapper - Embedded Python Blocks\ninput:\
      \  dibit stream (02 bits per byte) at 18kdibit\noutput: iq complex signal at\
      \ 36ksps\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\n\nclass Pi4DQPSK(gr.interp_block):\n\
      \    # Create our raised-cosine filter\n    num_taps = 11 * 2 + 1\n    beta\
      \ = 0.35\n    Ts = 2\n    t = np.arange(num_taps) - (num_taps-1) // 2\n    h\
      \ = np.sinc(t/Ts) * np.cos(np.pi*beta*t/Ts) / (1 - (2*beta*t/Ts)**2)\n    preConvI\
      \ = np.array([0] * 22, dtype = 'float32')\n    preConvQ = np.array([0] * 22,\
      \ dtype = 'float32')\n    \n    def __init__(self,):\n        gr.interp_block.__init__(\n\
      \            self,\n            name='Pi4DQPSK 18kDibit-to-36kIQk',   \t# will\
      \ show up in GRC\n            in_sig=[np.uint8,],\n            out_sig=[np.complex64],\
      \ interp = 2\n        )\n        self.interp = 2        \n        self.cur_phase_index\
      \ = \t0\t\t\t\t# current phase index value S(0) = 1\n        \n    def work(self,\
      \ input_items, output_items):\n        # Phase Index Change Table: corresponding\
      \ to current phase (row 0-7) and current dibit value (column 0-3)\n        #\
      \ B2k_1,B2k:   00 01 10 11\n            \n        phase_shift = (1, 3, 7, 5)\n\
      \n        # Phase value corresponding to Phase Index\n        IQ_table = ((\
      \ np.cos(np.pi/4 * 0) , np.sin(np.pi/4 * 0) ),\n                    ( np.cos(np.pi/4\
      \ * 1) , np.sin(np.pi/4 * 1) ),\n                    ( np.cos(np.pi/4 * 2) ,\
      \ np.sin(np.pi/4 * 2) ),\n                    ( np.cos(np.pi/4 * 3) , np.sin(np.pi/4\
      \ * 3) ),\n                    ( np.cos(np.pi/4 * 4) , np.sin(np.pi/4 * 4) ),\n\
      \                    ( np.cos(np.pi/4 * 5) , np.sin(np.pi/4 * 5) ),\n      \
      \              ( np.cos(np.pi/4 * 6) , np.sin(np.pi/4 * 6) ),\n            \
      \        ( np.cos(np.pi/4 * 7) , np.sin(np.pi/4 * 7) ))\n\n        # perform\
      \ rrc filter\n        tempI = np.array([0] * (len(input_items[0]) * 2), dtype='float32')\
      \ # 22 = rrc_taps - 1\n        tempQ = np.array([0] * (len(input_items[0]) *\
      \ 2), dtype='float32') # 22 = rrc_taps - 1\n\n        for i in range (0,len(input_items[0])):\n\
      \            input_dibit = input_items[0][i]\n                \n           \
      \ self.cur_phase_index += phase_shift[ input_dibit ]\n            if self.cur_phase_index\
      \ >= 8:\n                self.cur_phase_index -= 8\n\n            tempI[i*2]\
      \ = IQ_table[ self.cur_phase_index ][0]\n            tempQ[i*2] = IQ_table[\
      \ self.cur_phase_index ][1]\n\n        tempIconvolved = np.convolve(tempI, Pi4DQPSK.h)\
      \ \n        tempQconvolved = np.convolve(tempQ, Pi4DQPSK.h)\n        \n    \
      \    for i in range(len(Pi4DQPSK.h)-1):\n            tempIconvolved[i] += Pi4DQPSK.preConvI[i]\n\
      \            tempQconvolved[i] += Pi4DQPSK.preConvQ[i]\n\n        for i in range(len(Pi4DQPSK.h)-1):\n\
      \            Pi4DQPSK.preConvI[-i-1] = tempIconvolved[-i-1]\n            Pi4DQPSK.preConvQ[-i-1]\
      \ = tempQconvolved[-i-1]\n        for i in range(len(input_items[0])*2):\n \
      \           output_items[0][i] = tempIconvolved [i] + 1j*tempQconvolved[i]\n\
      \                                   \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Pi4DQPSK 18kDibit-to-36kIQk', 'Pi4DQPSK', [], [('0', 'byte', 1)],
      [('0', 'complex', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 496.0]
    rotation: 0
    state: enabled
- name: epy_block_1_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\ntetra_pi4dqpsk Mapper - Embedded Python Blocks\ninput:\
      \  dibit stream (02 bits per byte) at 18kdibit\noutput: iq complex signal at\
      \ 36ksps\n\"\"\"\n\nimport numpy as np\nfrom gnuradio import gr\n\nclass Pi4DQPSK(gr.interp_block):\n\
      \    # Create our raised-cosine filter\n    num_taps = 11 * 2 + 1\n    beta\
      \ = 0.35\n    Ts = 2\n    t = np.arange(num_taps) - (num_taps-1) // 2\n    h\
      \ = np.sinc(t/Ts) * np.cos(np.pi*beta*t/Ts) / (1 - (2*beta*t/Ts)**2)\n    preConvI\
      \ = np.array([0] * 22, dtype = 'float32')\n    preConvQ = np.array([0] * 22,\
      \ dtype = 'float32')\n    \n    def __init__(self,):\n        gr.interp_block.__init__(\n\
      \            self,\n            name='Pi4DQPSK 18kDibit-to-36kIQk',   \t# will\
      \ show up in GRC\n            in_sig=[np.uint8,],\n            out_sig=[np.complex64],\
      \ interp = 2\n        )\n        self.interp = 2        \n        self.cur_phase_index\
      \ = \t0\t\t\t\t# current phase index value S(0) = 1\n        \n    def work(self,\
      \ input_items, output_items):\n        # Phase Index Change Table: corresponding\
      \ to current phase (row 0-7) and current dibit value (column 0-3)\n        #\
      \ B2k_1,B2k:   00 01 10 11\n            \n        phase_shift = (1, 3, 7, 5)\n\
      \n        # Phase value corresponding to Phase Index\n        IQ_table = ((\
      \ np.cos(np.pi/4 * 0) , np.sin(np.pi/4 * 0) ),\n                    ( np.cos(np.pi/4\
      \ * 1) , np.sin(np.pi/4 * 1) ),\n                    ( np.cos(np.pi/4 * 2) ,\
      \ np.sin(np.pi/4 * 2) ),\n                    ( np.cos(np.pi/4 * 3) , np.sin(np.pi/4\
      \ * 3) ),\n                    ( np.cos(np.pi/4 * 4) , np.sin(np.pi/4 * 4) ),\n\
      \                    ( np.cos(np.pi/4 * 5) , np.sin(np.pi/4 * 5) ),\n      \
      \              ( np.cos(np.pi/4 * 6) , np.sin(np.pi/4 * 6) ),\n            \
      \        ( np.cos(np.pi/4 * 7) , np.sin(np.pi/4 * 7) ))\n\n        # perform\
      \ rrc filter\n        tempI = np.array([0] * (len(input_items[0]) * 2), dtype='float32')\
      \ # 22 = rrc_taps - 1\n        tempQ = np.array([0] * (len(input_items[0]) *\
      \ 2), dtype='float32') # 22 = rrc_taps - 1\n\n        for i in range (0,len(input_items[0])):\n\
      \            input_dibit = input_items[0][i]\n                \n           \
      \ self.cur_phase_index += phase_shift[ input_dibit ]\n            if self.cur_phase_index\
      \ >= 8:\n                self.cur_phase_index -= 8\n\n            tempI[i*2]\
      \ = IQ_table[ self.cur_phase_index ][0]\n            tempQ[i*2] = IQ_table[\
      \ self.cur_phase_index ][1]\n\n        tempIconvolved = np.convolve(tempI, Pi4DQPSK.h)\
      \ \n        tempQconvolved = np.convolve(tempQ, Pi4DQPSK.h)\n        \n    \
      \    for i in range(len(Pi4DQPSK.h)-1):\n            tempIconvolved[i] += Pi4DQPSK.preConvI[i]\n\
      \            tempQconvolved[i] += Pi4DQPSK.preConvQ[i]\n\n        for i in range(len(Pi4DQPSK.h)-1):\n\
      \            Pi4DQPSK.preConvI[-i-1] = tempIconvolved[-i-1]\n            Pi4DQPSK.preConvQ[-i-1]\
      \ = tempQconvolved[-i-1]\n        for i in range(len(input_items[0])*2):\n \
      \           output_items[0][i] = tempIconvolved [i] + 1j*tempQconvolved[i]\n\
      \                                   \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Pi4DQPSK 18kDibit-to-36kIQk', 'Pi4DQPSK', [], [('0', 'byte', 1)],
      [('0', 'complex', 1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 776.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: (symbol_rate*2)/(channel_rate)
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 192.0]
    rotation: 0
    state: disabled
- name: mmse_resampler_xx_0_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: (symbol_rate*2)/(channel_rate)
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 464.0]
    rotation: 0
    state: disabled
- name: mmse_resampler_xx_0_0_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: (symbol_rate*2)/(channel_rate)
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 744.0]
    rotation: 0
    state: disabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: channel_rate*interpolation
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 124.0]
    rotation: 0
    state: enabled
- name: qtgui_histogram_sink_x_0
  id: qtgui_histogram_sink_x
  parameters:
    accum: 'False'
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    bins: '32'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '2'
    size: 1024*16
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2.5'
    xmin: '-2.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1312, 564.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: 1024*16
    srate: channel_rate*interpolation
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '3'
    ymin: '-3'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 452.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '9'
    fbw: '0'
    interp: interpolation*20
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 196.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '9'
    fbw: '0'
    interp: interpolation*20
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 460.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_0_0_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '9'
    fbw: '0'
    interp: interpolation*20
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 732.0]
    rotation: 0
    state: enabled

connections:
- [analog_random_source_x_0, '0', epy_block_1, '0']
- [analog_random_source_x_0_0, '0', epy_block_1_0, '0']
- [analog_random_source_x_0_0_0, '0', epy_block_1_0_0, '0']
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '0']
- [analog_sig_source_x_0_0, '0', blocks_multiply_xx_0_0, '0']
- [analog_sig_source_x_0_0_0, '0', blocks_multiply_xx_0_0_0, '0']
- [blocks_add_xx_0, '0', blocks_throttle2_0, '0']
- [blocks_complex_to_float_0, '0', qtgui_histogram_sink_x_0, '0']
- [blocks_complex_to_float_0, '1', qtgui_histogram_sink_x_0, '1']
- [blocks_multiply_xx_0, '0', blocks_add_xx_0, '0']
- [blocks_multiply_xx_0_0, '0', blocks_add_xx_0, '1']
- [blocks_multiply_xx_0_0_0, '0', blocks_add_xx_0, '2']
- [blocks_throttle2_0, '0', blocks_complex_to_float_0, '0']
- [blocks_throttle2_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_throttle2_0, '0', qtgui_time_sink_x_0, '0']
- [epy_block_1, '0', mmse_resampler_xx_0, '0']
- [epy_block_1, '0', rational_resampler_xxx_0, '0']
- [epy_block_1_0, '0', mmse_resampler_xx_0_0, '0']
- [epy_block_1_0, '0', rational_resampler_xxx_0_0, '0']
- [epy_block_1_0_0, '0', mmse_resampler_xx_0_0_0, '0']
- [epy_block_1_0_0, '0', rational_resampler_xxx_0_0_0, '0']
- [mmse_resampler_xx_0, '0', rational_resampler_xxx_0, '0']
- [mmse_resampler_xx_0_0, '0', rational_resampler_xxx_0_0, '0']
- [mmse_resampler_xx_0_0_0, '0', rational_resampler_xxx_0_0_0, '0']
- [rational_resampler_xxx_0, '0', blocks_multiply_xx_0, '1']
- [rational_resampler_xxx_0_0, '0', blocks_multiply_xx_0_0, '1']
- [rational_resampler_xxx_0_0_0, '0', blocks_multiply_xx_0_0_0, '1']

metadata:
  file_format: 1
  grc_version: 3.10.10.0
